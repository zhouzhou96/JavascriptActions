# This workflow will pull image to openshift by uses actions.

name: pull-image-openshift

on:
  workflow_dispatch:
    inputs:
      openshift-token:
        required: true
        type: string
      openshift-app-name:
        required: true
        type: string
      REGISTRY_REPOS_TAG_NAME:
        required: true
        type: string
      REGISTRY_REPOS_TAG_VERSION:
        required: true
        type: string
      REGISTRY_REPOSITORY:
        required: true
        type: string
        default: int_docker_dev/projects/idf
      OPENSHIFT_NAMESPACE:
        required: true
        type: string
        default: idf-corp-vs-dev-1
      MOUNT_PATH:
        required: true
        type: string
        default: /appl/logs
      CLAIM_NAME:
        required: true
        type: string
        default: oc-create-pvc1
        
  workflow_call:
    inputs:
      openshift-token:
        required: true
        type: string
      openshift-app-name:
        required: true
        type: string
      REGISTRY_REPOS_TAG_NAME:
        required: true
        type: string
      REGISTRY_REPOS_TAG_VERSION:
        required: true
        type: string
      REGISTRY_REPOSITORY:
        required: true
        type: string
      OPENSHIFT_NAMESPACE:
        required: true
        type: string
      MOUNT_PATH:
        required: true
        type: string
        default: /appl/logs
      CLAIM_NAME:
        required: true
        type: string

jobs:
    
  pull-image-openshift-job:
    runs-on: self-hosted
    steps:
      - name: load env
        id: loadenv
        uses: ./.github/actions/env
         
#      - name: Pull JFrog Artifactory image to openshift
#        run: |
#          oc login --token=${{ github.event.inputs.openshift-token }} --server=${{ env.OPENSHIFT_SERVER }}
#          oc delete all -l app='${{ github.event.inputs.openshift-app-name }}'  
#          # create PVC
#          oc apply -f ${{ github.workspace }}/src/main/resources/yaml/createPvc.yaml
#          oc new-app --name=${{ github.event.inputs.openshift-app-name }} --docker-image='${{ env.REGISTRY_URL }}/${{ github.event.inputs.REGISTRY_REPOSITORY }}/${{ github.event.inputs.REGISTRY_REPOS_TAG_NAME }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}' -n ${{ github.event.inputs.OPENSHIFT_NAMESPACE }}
#         # bound PVC 
#          oc set volumes deployment/${{ github.event.inputs.openshift-app-name }} --add --mount-path=${{ github.event.inputs.MOUNT_PATH }} --claim-name=${{ github.event.inputs.CLAIM_NAME }}
#          oc set volumes deployment/${{ github.event.inputs.openshift-app-name }}
#          echo "All services should be up and running now."
#          echo "Exposing artifactory route to outside."
#          oc expose svc/${{ github.event.inputs.openshift-app-name }}
#          echo "Helloworld artifactory is up and running."
#          echo "Access Helloworld by follow url:"
#          oc get route ${{ github.event.inputs.openshift-app-name }}

      - name: variable 
        run: |
          echo 'pull image openshift 使用到的变量'

          echo 'github.event.inputs.openshift-token  ---------------->  ${{ github.event.inputs.openshift-token }}'
          echo 'steps.loadenv.outputs.OPENSHIFT_SERVER  ---------------->  ${{ steps.loadenv.outputs.OPENSHIFT_SERVER }}'
          echo 'github.event.inputs.openshift-app-name  ---------------->  ${{ github.event.inputs.openshift-app-name }}'
          echo 'github.workspace  ---------------->  ${{ github.workspace }}'
          echo 'steps.loadenv.outputs.REGISTRY_URL  ---------------->  ${{ steps.loadenv.outputs.REGISTRY_URL }}'
          echo 'github.event.inputs.REGISTRY_REPOSITORY  ---------------->  ${{ github.event.inputs.REGISTRY_REPOSITORY }}'
          echo 'github.event.inputs.REGISTRY_REPOS_TAG_NAME  ---------------->  ${{ github.event.inputs.REGISTRY_REPOS_TAG_NAME }}'
          echo 'github.event.inputs.REGISTRY_REPOS_TAG_VERSION  ---------------->  ${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}'
          echo 'github.event.inputs.OPENSHIFT_NAMESPACE  ---------------->  ${{ github.event.inputs.OPENSHIFT_NAMESPACE }}'
          echo 'github.event.inputs.MOUNT_PATH  ---------------->  ${{ github.event.inputs.MOUNT_PATH }}'
          echo 'github.event.inputs.CLAIM_NAME  ---------------->  ${{ github.event.inputs.CLAIM_NAME }}'
    
      - name: using command
        run: |
          echo 'pull image openshift 使用到的指令'
          echo 'Command: oc login --token=${{ github.event.inputs.openshift-token }} --server=${{ env.OPENSHIFT_SERVER }}'
          echo 'Command: oc delete all -l app='${{ github.event.inputs.openshift-app-name }}''
          echo 'Command: oc apply -f ${{ github.workspace }}/src/main/resources/yaml/createPvc.yaml'
          echo 'Command: oc new-app --name=${{ github.event.inputs.openshift-app-name }} --docker-image='${{ env.REGISTRY_URL }}/${{ github.event.inputs.REGISTRY_REPOSITORY }}/${{ github.event.inputs.REGISTRY_REPOS_TAG_NAME }}:${{ github.event.inputs.REGISTRY_REPOS_TAG_VERSION }}' -n ${{ github.event.inputs.OPENSHIFT_NAMESPACE }}'
          echo 'Command: oc set volumes deployment/${{ github.event.inputs.openshift-app-name }} --add --mount-path=${{ github.event.inputs.MOUNT_PATH }} --claim-name=${{ github.event.inputs.CLAIM_NAME }}'
          echo 'Command: oc set volumes deployment/${{ github.event.inputs.openshift-app-name }}'
          echo 'Command: oc expose svc/${{ github.event.inputs.openshift-app-name }}'
          echo 'Command: oc get route ${{ github.event.inputs.openshift-app-name }}'



